/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { NodeComponentProps, NodeData } from "./components/node-editor/node-editor-component";
export { NodeComponentProps, NodeData } from "./components/node-editor/node-editor-component";
export namespace Components {
    interface AddNewElementButton {
        "activeFunction": (input:string|boolean) => void;
        "buttonName": string;
        "inputFunctionOne": string|boolean;
    }
    interface AppHome {
    }
    interface AppRoot {
    }
    interface NodeComponent {
        "functionalDescription": string;
        "inputClick": (event: MouseEvent) => void;
        "inputs": string[];
        "name": string;
        "nodeComponentProps": NodeComponentProps;
        "nodeId": string;
        "outputClick": (event: MouseEvent) => void;
        "outputs": string[];
        "returnTypeDescription": string;
        "scaffold": (nodeId: string, nodeName: string, functionalDescription: string, returnTypeDescription: string) => void;
        "scaffolded": boolean;
    }
    interface NodeEditorComponent {
    }
    interface NodeElement {
    }
    interface NodeOverview {
        "node": NodeData;
    }
}
declare global {
    interface HTMLAddNewElementButtonElement extends Components.AddNewElementButton, HTMLStencilElement {
    }
    var HTMLAddNewElementButtonElement: {
        prototype: HTMLAddNewElementButtonElement;
        new (): HTMLAddNewElementButtonElement;
    };
    interface HTMLAppHomeElement extends Components.AppHome, HTMLStencilElement {
    }
    var HTMLAppHomeElement: {
        prototype: HTMLAppHomeElement;
        new (): HTMLAppHomeElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLNodeComponentElement extends Components.NodeComponent, HTMLStencilElement {
    }
    var HTMLNodeComponentElement: {
        prototype: HTMLNodeComponentElement;
        new (): HTMLNodeComponentElement;
    };
    interface HTMLNodeEditorComponentElement extends Components.NodeEditorComponent, HTMLStencilElement {
    }
    var HTMLNodeEditorComponentElement: {
        prototype: HTMLNodeEditorComponentElement;
        new (): HTMLNodeEditorComponentElement;
    };
    interface HTMLNodeElementElement extends Components.NodeElement, HTMLStencilElement {
    }
    var HTMLNodeElementElement: {
        prototype: HTMLNodeElementElement;
        new (): HTMLNodeElementElement;
    };
    interface HTMLNodeOverviewElement extends Components.NodeOverview, HTMLStencilElement {
    }
    var HTMLNodeOverviewElement: {
        prototype: HTMLNodeOverviewElement;
        new (): HTMLNodeOverviewElement;
    };
    interface HTMLElementTagNameMap {
        "add-new-element-button": HTMLAddNewElementButtonElement;
        "app-home": HTMLAppHomeElement;
        "app-root": HTMLAppRootElement;
        "node-component": HTMLNodeComponentElement;
        "node-editor-component": HTMLNodeEditorComponentElement;
        "node-element": HTMLNodeElementElement;
        "node-overview": HTMLNodeOverviewElement;
    }
}
declare namespace LocalJSX {
    interface AddNewElementButton {
        "activeFunction"?: (input:string|boolean) => void;
        "buttonName"?: string;
        "inputFunctionOne"?: string|boolean;
    }
    interface AppHome {
    }
    interface AppRoot {
    }
    interface NodeComponent {
        "functionalDescription"?: string;
        "inputClick"?: (event: MouseEvent) => void;
        "inputs"?: string[];
        "name"?: string;
        "nodeComponentProps"?: NodeComponentProps;
        "nodeId"?: string;
        "outputClick"?: (event: MouseEvent) => void;
        "outputs"?: string[];
        "returnTypeDescription"?: string;
        "scaffold"?: (nodeId: string, nodeName: string, functionalDescription: string, returnTypeDescription: string) => void;
        "scaffolded"?: boolean;
    }
    interface NodeEditorComponent {
    }
    interface NodeElement {
    }
    interface NodeOverview {
        "node"?: NodeData;
    }
    interface IntrinsicElements {
        "add-new-element-button": AddNewElementButton;
        "app-home": AppHome;
        "app-root": AppRoot;
        "node-component": NodeComponent;
        "node-editor-component": NodeEditorComponent;
        "node-element": NodeElement;
        "node-overview": NodeOverview;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "add-new-element-button": LocalJSX.AddNewElementButton & JSXBase.HTMLAttributes<HTMLAddNewElementButtonElement>;
            "app-home": LocalJSX.AppHome & JSXBase.HTMLAttributes<HTMLAppHomeElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "node-component": LocalJSX.NodeComponent & JSXBase.HTMLAttributes<HTMLNodeComponentElement>;
            "node-editor-component": LocalJSX.NodeEditorComponent & JSXBase.HTMLAttributes<HTMLNodeEditorComponentElement>;
            "node-element": LocalJSX.NodeElement & JSXBase.HTMLAttributes<HTMLNodeElementElement>;
            "node-overview": LocalJSX.NodeOverview & JSXBase.HTMLAttributes<HTMLNodeOverviewElement>;
        }
    }
}
